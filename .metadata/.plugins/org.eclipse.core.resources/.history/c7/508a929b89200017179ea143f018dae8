package com.wbl.test;

import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriverException;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.wbl.base.BaseTest;
import com.wbl.helper.ExcelHelper;
import com.wbl.page.AmazonAddToCart;
import com.wbl.page.AmazonHomePage;
import com.wbl.page.AmazonHomePageCopy;
import com.wbl.page.AmazonSearch;

public class AmazonAddToCartTest extends BaseTest {

	AmazonSearch as;
	AmazonAddToCart atc;
	Object[][] data = null;

	int itemCount = 0;

	int count = 0;
	
	String result = "";
	
	@BeforeClass
	public void before() {

		// ahp = new AmazonHomePageCopy(driver);
		as = new AmazonSearch(driver);
 		atc = new AmazonAddToCart(driver);
		
	//	atc = as.addItem(item);

	}

	@DataProvider(name = "search")
	public Object[][] searchData() {

		data = ExcelHelper.getExcelData("test-data\\AmazonSearchTestData.xlsx", "clothing");

		return data;

	}

        
	   @DataProvider(name = "item") 
	   public Object[][] itemData() {
	  
	  data =   ExcelHelper.getExcelData("test-data\\AmazonAddToCartData.xlsx","addItem") ;
	          
	          return data;
	          
	          }
	          
	          
	          
	          
	          @DataProvider(name = "size") 
	          public Object[][] sizeData() {
	          
	          data = ExcelHelper.getExcelData("test-data\\AmazonAddToCartData.xlsx","addSize");
	          
	          return data;
	          
	          }
	          
	          @DataProvider(name = "color") 
	          public Object[][] colorData() {
	          
	          data =
	          ExcelHelper.getExcelData("test-data\\AmazonAddToCartData.xlsx","addColor");
	          
	          return data;
	          
	          }
	          
	          @DataProvider(name = "qnty") 
	          public Object[][] qntyData() {
	          
	          data =
	          ExcelHelper.getExcelData("test-data\\AmazonAddToCartData.xlsx","addQnty");
	           
	          
	          return data;
	          
	          }
	          
	          @DataProvider(name = "ship") public Object[][] shipData() {
	          
	          data =
	          ExcelHelper.getExcelData("test-data\\AmazonAddToCartData.xlsx","addShip");
	           
	          
	          return data;
	          
	          }
	          
	          @DataProvider(name = "areaCode") 
	          public Object[][] areaCodeData() {
	          
	          data = ExcelHelper.getExcelData("test-data\\AmazonAddToCartData.xlsx", "addAreaCode");
	          
	          return data;
	          
	          }
	          
	          
	          @DataProvider(name = "cart")
	          public Object[][] addToCartData() {
	          
	          data = ExcelHelper.getExcelData("test-data\\AmazonAddToCartData.xlsx", "addToCart");
	          
	          return data;
	          
	          }
	          
	        

	@Test(dataProvider = "search", alwaysRun = true)
	public void addItemsTest(String dropDownSearch, String item, String person, String price, String searchOpt,
			String sortType, String cartItem, String size, String color, String qnty, String ship, String areaCode
			,String Expected1,String Expected2,String Expected3,String Expected4, String Expected5) throws TimeoutException, InterruptedException {

		as.allDropDown(dropDownSearch);
		as.dropDownChoice(item, person);
		as.sortChoice(price, sortType);
		as.searchResults(searchOpt);

		atc.addItem(cartItem);
		atc.addSize(size);
		atc.addColor(color);

		atc.addQnty(qnty);
		atc.addShipping(ship);
		atc.addAreaCode(areaCode);

	}

	@Test(dataProvider = "cart", dependsOnMethods = { "addItemsTest" })
	public void addItemsToCartTest(String cartItem, String size, String color, String qnty, String ship,
			String areaCode) throws TimeoutException, InterruptedException {
		atc.addItem(cartItem);
		atc.addSize(size);
		atc.addColor(color);

		atc.addQnty(qnty);
		atc.addShipping(ship);
		atc.addAreaCode(areaCode);

		/*       
		          atc.addItem(cartItem); atc.addSize(cartItem,size);
		          atc.addColor(cartItem, size, color); atc.addQnty(cartItem, size,
		          color, qnty); atc.addShipping(cartItem, size, color, qnty, ship );
		          atc.addAreaCode(cartItem, size, color, qnty, ship, areaCode);
		          
		         */

		atc.addToCartButton();
		atc.updatingCartPage();
	}

	// String cartItem, String size,String color,String qnty,String ship,String
	// areaCode

	//@Test(dataProvider = "item")
	
	
	@Test(dataProvider = "search")
	public void addItemTest(String dropDownSearch, String item, String person, String price, String searchOpt,
			String sortType, String cartItem, String size, String color, String qnty, String ship, String areaCode
			,String Expected1,String Expected2,String Expected3,String Expected4, String Expected5) {

		System.out.println("entered add item test and the count is : " + itemCount);
		
		if ( itemCount == 0 ) {
			itemCount++;
			driver.get("https://www.amazon.com/s/ref=sr_nr_p_36_0?rnid=2661611011&keywords=watches&fst=p90x%3A1&"
					+ "rh=n%3A7141123011%2Cn%3A7147440011%2Ck%3Awatches%2Cp_36%3A2661615011%2Cp_89%3AMichael+Kors&sort=price-desc-rank&qid=1492033363&bbn=7147440011&low-price=100&high-price=120&x=15&y=10");
		}
		
		else if (itemCount == 1) {
			driver.get("https://www.amazon.com/s/ref=sr_pg_2?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3A7147441"
					+ "011%2Ck%3Aleather+shoes%2Cp_36%3A2661614011&page=2&bbn=7141123011&sort=price-desc-rank&keywords=leather+shoes&ie=UTF8&qid=1492015522");
			itemCount++;

		}
		
		else if ( itemCount == 2 ) {
			driver.get("https://www.amazon.com/gp/search/ref=sr_st?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3"
					+ "A10886357011%2Cn%3A7147442011%2Cp_36%3A2661612011&qid=1492016577&bbn=10886357011&sort=price-desc-rank");
			itemCount++;

		}

	/*	
		as.allDropDown(dropDownSearch);
		as.dropDownChoice(item, person);
		as.sortChoice(price, sortType);
		as.searchResults(searchOpt);
		*/
		
		atc.addItem(cartItem);

	}

//	@Test(dataProvider = "size")

	@Test(dataProvider = "search")
	public void addSizeTest(String dropDownSearch, String item, String person, String price, String searchOpt,
			String sortType, String cartItem, String size, String color, String qnty, String ship, String areaCode
			,String Expected1,String Expected2,String Expected3,String Expected4, String Expected5) {
		
	 
		
System.out.println("entered add size test and the count is : " + itemCount);
		
		if ( itemCount == 0 ) {
			driver.get("https://www.amazon.com/Michael-Kors-Womens-Garner-MK2574/dp/B01EI7QCWU/ref=sr_1_20?s=apparel"
					+ "&ie=UTF8&qid=1492033573&sr=1-20&nodeID=7147440011&psd=1&keywords=watches&refinements=p_36%3A10000-12000%2Cp_89%3AMichael+Kors");
			
			itemCount++;
		
		}
		
		else if (itemCount == 1) {
			driver.get("https://www.amazon.com/Florsheim-Castellano-Wing-Oxford-Black/dp/B00E5OU8EA/ref=sr_1_71"
					+ "?s=apparel&ie=UTF8&qid=1492033617&sr=1-71&nodeID=7147441011&psd=1&keywords=leather+shoes&refinements=p_36%3A2661614011");
			
			itemCount++;

		}
		
		else if ( itemCount == 2 ) {
			driver.get("https://www.amazon.com/Bonnie-Jean-Toddler-Colorblock-Poplin/dp/B06XFQXX7G/ref=sr"
					+ "_1_23?s=apparel&ie=UTF8&qid=1492033635&sr=1-23&nodeID=7147442011&psd=1&refinements=p_36%3A2661612011");
			
			itemCount++;

		}
		
		

		String result = atc.addSize(size);

		System.out.println("the result " + result);
	}

//	@Test(dataProvider = "color")
	@Test(dataProvider = "search")
	public void addColorTest(String dropDownSearch, String item, String person, String price, String searchOpt,
			String sortType, String cartItem, String size, String color, String qnty, String ship, String areaCode
			,String Expected1,String Expected2,String Expected3,String Expected4, String Expected5) {


		System.out.println("entered add color test and the count is : " + itemCount);
		
		if ( itemCount == 0 ) {
			itemCount++;
			driver.get("https://www.amazon.com/s/ref=sr_nr_p_36_0?rnid=2661611011&keywords=watches&fst=p90x%3A1&"
					+ "rh=n%3A7141123011%2Cn%3A7147440011%2Ck%3Awatches%2Cp_36%3A2661615011%2Cp_89%3AMichael+Kors&sort=price-desc-rank&qid=1492033363&bbn=7147440011&low-price=100&high-price=120&x=15&y=10");
		}
		
		else if (itemCount == 1) {
			driver.get("https://www.amazon.com/s/ref=sr_pg_2?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3A7147441"
					+ "011%2Ck%3Aleather+shoes%2Cp_36%3A2661614011&page=2&bbn=7141123011&sort=price-desc-rank&keywords=leather+shoes&ie=UTF8&qid=1492015522");
			itemCount++;

		}
		
		else if ( itemCount == 2 ) {
			driver.get("https://www.amazon.com/gp/search/ref=sr_st?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3"
					+ "A10886357011%2Cn%3A7147442011%2Cp_36%3A2661612011&qid=1492016577&bbn=10886357011&sort=price-desc-rank");
			itemCount++;

		}
		
		atc.addItem(cartItem);

		atc.addSize(size);
		
	  result	 = atc.addColor(color);
		
		System.out.println(result);
		
 

	}

	//@Test(dataProvider = "qnty")
	
	@Test(dataProvider = "search")
	public void addQuantityTest(String dropDownSearch, String item, String person, String price, String searchOpt,
			String sortType, String cartItem, String size, String color, String qnty, String ship, String areaCode
			,String Expected1,String Expected2,String Expected3,String Expected4, String Expected5) throws TimeoutException, InterruptedException {
		
		 
		
System.out.println("entered add quantity test and the count is : " + itemCount);
		
		if ( itemCount == 0 ) {
			itemCount++;
			driver.get("https://www.amazon.com/s/ref=sr_nr_p_36_0?rnid=2661611011&keywords=watches&fst=p90x%3A1&"
					+ "rh=n%3A7141123011%2Cn%3A7147440011%2Ck%3Awatches%2Cp_36%3A2661615011%2Cp_89%3AMichael+Kors&sort=price-desc-rank&qid=1492033363&bbn=7147440011&low-price=100&high-price=120&x=15&y=10");
		}
		
		else if (itemCount == 1) {
			driver.get("https://www.amazon.com/s/ref=sr_pg_2?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3A7147441"
					+ "011%2Ck%3Aleather+shoes%2Cp_36%3A2661614011&page=2&bbn=7141123011&sort=price-desc-rank&keywords=leather+shoes&ie=UTF8&qid=1492015522");
			itemCount++;

		}
		
		else if ( itemCount == 2 ) {
			driver.get("https://www.amazon.com/gp/search/ref=sr_st?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3"
					+ "A10886357011%2Cn%3A7147442011%2Cp_36%3A2661612011&qid=1492016577&bbn=10886357011&sort=price-desc-rank");
			itemCount++;

		}
		
		atc.addItem(cartItem);

		atc.addSize(size);
		atc.addColor(color);
		

		result = atc.addQnty(qnty);
		
		System.out.println(result);


	}

//	@Test(dataProvider = "ship")
	
	@Test(dataProvider = "search")
	public void addShippingTest(String dropDownSearch, String item, String person, String price, String searchOpt,
			String sortType, String cartItem, String size, String color, String qnty, String ship, String areaCode
			,String Expected1,String Expected2,String Expected3,String Expected4, String Expected5) throws WebDriverException, InterruptedException {
		
System.out.println("entered shipping test and the count is : " + itemCount);
		
		if ( itemCount == 0 ) {
			itemCount++;
			driver.get("https://www.amazon.com/s/ref=sr_nr_p_36_0?rnid=2661611011&keywords=watches&fst=p90x%3A1&"
					+ "rh=n%3A7141123011%2Cn%3A7147440011%2Ck%3Awatches%2Cp_36%3A2661615011%2Cp_89%3AMichael+Kors&sort=price-desc-rank&qid=1492033363&bbn=7147440011&low-price=100&high-price=120&x=15&y=10");
		}
		
		else if (itemCount == 1) {
			driver.get("https://www.amazon.com/s/ref=sr_pg_2?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3A7147441"
					+ "011%2Ck%3Aleather+shoes%2Cp_36%3A2661614011&page=2&bbn=7141123011&sort=price-desc-rank&keywords=leather+shoes&ie=UTF8&qid=1492015522");
			itemCount++;

		}
		
		else if ( itemCount == 2 ) {
			driver.get("https://www.amazon.com/gp/search/ref=sr_st?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3"
					+ "A10886357011%2Cn%3A7147442011%2Cp_36%3A2661612011&qid=1492016577&bbn=10886357011&sort=price-desc-rank");
			itemCount++;

		}
		
		
		atc.addItem(cartItem);

		atc.addSize(size);

		atc.addColor(color);


		atc.addQnty(qnty);


		result = atc.addShipping(ship);
		
		System.out.println(result);


	}

//	@Test(dataProvider = "areaCode")
	
	@Test(dataProvider = "search")
	public void addAreaCodeTest(String dropDownSearch, String item, String person, String price, String searchOpt,
			String sortType, String cartItem, String size, String color, String qnty, String ship, String areaCode
			,String Expected1,String Expected2,String Expected3,String Expected4, String Expected5) throws TimeoutException, InterruptedException {
		
		
System.out.println("entered areaCode test and the count is : " + itemCount);
		
		if ( itemCount == 0 ) {
			itemCount++;
			driver.get("https://www.amazon.com/s/ref=sr_nr_p_36_0?rnid=2661611011&keywords=watches&fst=p90x%3A1&"
					+ "rh=n%3A7141123011%2Cn%3A7147440011%2Ck%3Awatches%2Cp_36%3A2661615011%2Cp_89%3AMichael+Kors&sort=price-desc-rank&qid=1492033363&bbn=7147440011&low-price=100&high-price=120&x=15&y=10");
		}
		
		else if (itemCount == 1) {
			driver.get("https://www.amazon.com/s/ref=sr_pg_2?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3A7147441"
					+ "011%2Ck%3Aleather+shoes%2Cp_36%3A2661614011&page=2&bbn=7141123011&sort=price-desc-rank&keywords=leather+shoes&ie=UTF8&qid=1492015522");
			itemCount++;

		}
		
		else if ( itemCount == 2 ) {
			driver.get("https://www.amazon.com/gp/search/ref=sr_st?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3"
					+ "A10886357011%2Cn%3A7147442011%2Cp_36%3A2661612011&qid=1492016577&bbn=10886357011&sort=price-desc-rank");
			itemCount++;

		}
		
		
		
		atc.addItem(cartItem);

		atc.addSize(size);

		atc.addColor(color);


		atc.addQnty(qnty);


		atc.addShipping(ship);


		result = atc.addAreaCode(areaCode);
		System.out.println(result);
		

	}

	@Test(dataProvider = "search")
	void addToCartButtonTest(String dropDownSearch, String item, String person, String price, String searchOpt,
			String sortType, String cartItem, String size, String color, String qnty, String ship, String areaCode
			,String Expected1,String Expected2,String Expected3,String Expected4, String Expected5) throws TimeoutException, InterruptedException {

		
System.out.println("entered addToCartButton test and the count is : " + itemCount);
		
		if ( itemCount == 0 ) {
			itemCount++;
			driver.get("https://www.amazon.com/s/ref=sr_nr_p_36_0?rnid=2661611011&keywords=watches&fst=p90x%3A1&"
					+ "rh=n%3A7141123011%2Cn%3A7147440011%2Ck%3Awatches%2Cp_36%3A2661615011%2Cp_89%3AMichael+Kors&sort=price-desc-rank&qid=1492033363&bbn=7147440011&low-price=100&high-price=120&x=15&y=10");
		}
		
		else if (itemCount == 1) {
			driver.get("https://www.amazon.com/s/ref=sr_pg_2?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3A7147441"
					+ "011%2Ck%3Aleather+shoes%2Cp_36%3A2661614011&page=2&bbn=7141123011&sort=price-desc-rank&keywords=leather+shoes&ie=UTF8&qid=1492015522");
			itemCount++;

		}
		
		else if ( itemCount == 2 ) {
			driver.get("https://www.amazon.com/gp/search/ref=sr_st?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3"
					+ "A10886357011%2Cn%3A7147442011%2Cp_36%3A2661612011&qid=1492016577&bbn=10886357011&sort=price-desc-rank");
			itemCount++;

		}
		
		
		
		atc.addItem(cartItem);

		atc.addSize(size);

		atc.addColor(color);


		atc.addQnty(qnty);


		atc.addShipping(ship);

		atc.addAreaCode(areaCode);
		
	 	
		
		String[] res = atc.addToCartButton();
		

		System.out.println("the cart title is : " + res[2]);

		itemCount = Integer.parseInt(res[1]);

		if (res[1] == res[0] + 1) {

			System.out.println("The number of items in the cart is   updated by 1");
		} else {
			System.out.println("The number of items in the cart is not updated");

		}

		System.out.println("the cart count before and after is : " + res[0] + "  " + res[1]);

		Assert.assertEquals(res[3], "Amazon.com Shopping Cart");

	}
	
	
	@Test(dataProvider = "search")
	public void updatingCartPageTest ( String dropDownSearch, String item, String person, String price, String searchOpt,
			String sortType, String cartItem, String size, String color, String qnty, String ship, String areaCode
			,String Expected1,String Expected2,String Expected3,String Expected4, String Expected5) throws TimeoutException, InterruptedException {
		
		
System.out.println("entered cartPageTest and the count is : " + itemCount);
		
		if ( itemCount == 0 ) {
			itemCount++;
			driver.get("https://www.amazon.com/s/ref=sr_nr_p_36_0?rnid=2661611011&keywords=watches&fst=p90x%3A1&"
					+ "rh=n%3A7141123011%2Cn%3A7147440011%2Ck%3Awatches%2Cp_36%3A2661615011%2Cp_89%3AMichael+Kors&sort=price-desc-rank&qid=1492033363&bbn=7147440011&low-price=100&high-price=120&x=15&y=10");
		}
		
		else if (itemCount == 1) {
			driver.get("https://www.amazon.com/s/ref=sr_pg_2?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3A7147441"
					+ "011%2Ck%3Aleather+shoes%2Cp_36%3A2661614011&page=2&bbn=7141123011&sort=price-desc-rank&keywords=leather+shoes&ie=UTF8&qid=1492015522");
			itemCount++;

		}
		
		else if ( itemCount == 2 ) {
			driver.get("https://www.amazon.com/gp/search/ref=sr_st?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3"
					+ "A10886357011%2Cn%3A7147442011%2Cp_36%3A2661612011&qid=1492016577&bbn=10886357011&sort=price-desc-rank");
			itemCount++;

		}
		
		
		
		atc.addItem(cartItem);

		atc.addSize(size);

		atc.addColor(color);


		atc.addQnty(qnty);


		atc.addShipping(ship);

		atc.addAreaCode(areaCode);
		
	    atc.addToCartButton();
		
	
		

		String[] res = atc.updatingCartPage();
		
		System.out.println(res[0] + "   " + res[1]  + "  " + res[2]  );

	}
	
	
	
	
	
	@Test(dataProvider = "search")
	public void viewCartPageTest ( String dropDownSearch, String item, String person, String price, String searchOpt,
			String sortType, String cartItem, String size, String color, String qnty, String ship, String areaCode
			,String Expected1,String Expected2,String Expected3,String Expected4, String Expected5) throws TimeoutException, InterruptedException {
		
		
System.out.println("entered cartPageTest and the count is : " + itemCount);
		
		if ( itemCount == 0 ) {
			itemCount++;
			driver.get("https://www.amazon.com/s/ref=sr_nr_p_36_0?rnid=2661611011&keywords=watches&fst=p90x%3A1&"
					+ "rh=n%3A7141123011%2Cn%3A7147440011%2Ck%3Awatches%2Cp_36%3A2661615011%2Cp_89%3AMichael+Kors&sort=price-desc-rank&qid=1492033363&bbn=7147440011&low-price=100&high-price=120&x=15&y=10");
		}
		
		else if (itemCount == 1) {
			driver.get("https://www.amazon.com/s/ref=sr_pg_2?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3A7147441"
					+ "011%2Ck%3Aleather+shoes%2Cp_36%3A2661614011&page=2&bbn=7141123011&sort=price-desc-rank&keywords=leather+shoes&ie=UTF8&qid=1492015522");
			itemCount++;

		}
		
		else if ( itemCount == 2 ) {
			driver.get("https://www.amazon.com/gp/search/ref=sr_st?fst=as%3Aoff&rh=n%3A7141123011%2Cn%3"
					+ "A10886357011%2Cn%3A7147442011%2Cp_36%3A2661612011&qid=1492016577&bbn=10886357011&sort=price-desc-rank");
			itemCount++;

		}
		
		
		
		atc.addItem(cartItem);

		atc.addSize(size);

		atc.addColor(color);


		atc.addQnty(qnty);


		atc.addShipping(ship);

		atc.addAreaCode(areaCode);
		
	    atc.addToCartButton();
		
	
		

		String[] res = atc.updatingCartPage();
		
		System.out.println(res[0] + "   " + res[1]  + "  " + res[2]  );

	}
	
	
	
	
	
	
	
	
	
	
/*	
	
	as.allDropDown(dropDownSearch);
	as.dropDownChoice(item, person);
	as.sortChoice(price, sortType);
	as.searchResults(searchOpt);
	
	
	atc.addItem(cartItem);

	atc.addSize(size);

	atc.addColor(color);


	atc.addQnty(qnty);


	atc.addShipping(ship);


	atc.addAreaCode(areaCode);

*/
}